knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
library(haven)
my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/R/PSet1_R.Rmd")
my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
View(my_data)
#For variables that can take on 8 and 9
cleanset1<-"cardiac, lung, diabetes, herpes, hydra, hemo, chyper, phyper, eclamp, incervix, pre4000, preterm"
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "hydra", "hemo", "chyper", "phyper", "eclamp", "incervix", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
unique(across(all_of(cleanset1))
unique(across(all_of(cleanset1)))
my_data %>%
select(all_of(cleanset1)) %>%
unique()
print(my_data %>%
select(all_of(cleanset1)) %>%
unique())
check1<-my_data %>%
select(all_of(cleanset1)) %>%
unique()
print(check1)
View(check1)
my_data%>%unique(cardiac)
unique(my_data$cardiac)
for (var in cleanset1) {
unique(my_data$var)
}
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#Loop to check now:
for (var in cleanset1) {
unique(my_data$var)
}
#Loop to check now:
for (var in cleanset1) {
unique<-unique(my_data$var)
unique
}
#check cardiac
unique(my_data$cardiac)
#For variables that only take on 9 as missing
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 99)))
#check tobacco
unique(my_data$tobacco)
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 9)))
#check tobacco
unique(my_data$tobacco)
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#check cardiac
unique(my_data$cardiac)
#For variables that only take on 9 as missing
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 9)))
#check tobacco
unique(my_data$tobacco)
#For drink5
my_data <- my_data %>%
mutate(drink5, ~na_if(., 5))
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#check cardiac
unique(my_data$cardiac)
#For variables that only take on 9 as missing
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 9)))
#check tobacco
unique(my_data$tobacco)
#For drink5
my_data <- my_data %>%
mutate(drink5 = ifelse(drink5 == 5, NA, drink5))
#check drink5
unique(my_data$drink5)
#For wgain
my_data <- my_data %>%
mutate(wgain = ifelse(wgain == 99, NA, wgain))
#check wgain
unique(my_data$wgain)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(haven)
my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
#Check which variables take on the form 1-2.
apply(my_data1,2,function(x) {all(x %in% 0:1)})
apply(my_data,2,function(x) {all(x %in% 0:1)})
apply(my_data,2,function(x) {all(x %in% 1:2)})
my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
#Check which variables take on the form 1-2.
apply(my_data,2,function(x) {all(x %in% 1:2)})
library(dplyr)
library(haven)
my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
#I need to tabulate these all still lol
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#check cardiac
unique(my_data$cardiac)
#For variables that only take on 9 as missing
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 9)))
#check tobacco
unique(my_data$tobacco)
#For drink5
my_data <- my_data %>%
mutate(drink5 = ifelse(drink5 == 5, NA, drink5))
#check drink5
unique(my_data$drink5)
#For wgain
my_data <- my_data %>%
mutate(wgain = ifelse(wgain == 99, NA, wgain))
#check wgain
unique(my_data$wgain)
#Check which variables take on the form 1-2.
apply(my_data,2,function(x) {all(x %in% 1:2)})
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Check which variables take on the form 1, 2, or missing
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Turn each indicator variable into the form 0 v 1 by mutating such that 2's become 0's.
indicator_set <- c("rectype", "pldel3", "dmar", "csex", "anemia", "cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm", "tobacco", "alcohol")
for(var in indicator_set){
my_data<-my_data %>%
mutate_at(vars, funs(ifelse(.==2, 0, .)))
}
#Check which variables take on the form 1, 2, or missing
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Turn each indicator variable into the form 0 v 1 by mutating such that 2's become 0's.
indicator_set <- c("rectype", "pldel3", "dmar", "csex", "anemia", "cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm", "tobacco", "alcohol")
for(var in indicator_set){
my_data<-my_data %>%
mutate_at(var, funs(ifelse(.==2, 0, .)))
}
#Check if this works - everything should return false using our original check
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
class(my_data$mrace3)
#Recode mrace3 as categorical variable (so a factor variable)
class(my_data$mrace3) #starts off as numeric
my_data<-my_data%>%factor(mrace3)
my_data<-my_data%>%mutate(mrace3 = factor(mrace3))
#Check
class(my_data$mrace3)
class(my_data$ormoth)
class(my_data$orfath)
unique(my_data$ormoth)
unique(my_data$orfath)
my_data<-my_data%>% mutate(ormoth = ifelse(ormoth > 1, 1, ormoth),
orfath = ifelse(orfath > 1, 1, orfath))
unique(my_data$ormoth)
unique(my_data$orfath)
unique(my_data$stresfip)
unique(my_data$birmon)
unique(my_data$weekday)
my_data<-my_data%>%select(-stresfip, birmon, weekday)
unique(my_data$stresfip) #Could convert this into a regional variable
unique(my_data$birmon) #Could turn this into a quarter?
unique(my_data$weekday) #could treat like a weekday vs weekend binary variable
my_data<-my_data%>%select(-(stresfip, birmon, weekday))
my_data<-my_data%>% select(-c(stresfip, birmon, weekday))
my_data<-my_data%>% select(-c( birmon, weekday))
my_data<-my_data%>%
filter_all(all_vars(!is.na(.)))
my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
#I need to tabulate these all still lol
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#check cardiac
unique(my_data$cardiac)
#For variables that only take on 9 as missing
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 9)))
#check tobacco
unique(my_data$tobacco)
#For drink5
my_data <- my_data %>%
mutate(drink5 = ifelse(drink5 == 5, NA, drink5))
#check drink5
unique(my_data$drink5)
#For wgain
my_data <- my_data %>%
mutate(wgain = ifelse(wgain == 99, NA, wgain))
#check wgain
unique(my_data$wgain)
#Check which variables take on the form 1, 2, or missing
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Turn each indicator variable into the form 0 v 1 by mutating such that 2's become 0's.
indicator_set <- c("rectype", "pldel3", "dmar", "csex", "anemia", "cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm", "tobacco", "alcohol")
for(var in indicator_set){
my_data<-my_data %>%
mutate_at(var, funs(ifelse(.==2, 0, .)))
}
#Check if this works - everything should return false using our original check
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Recode mrace3 as categorical variable (so a factor variable)
class(my_data$mrace3) #starts off as numeric
my_data<-my_data%>%mutate(mrace3 = factor(mrace3))
#Check
class(my_data$mrace3) #confirmed as factor
#Coarsen ormoth and orfath into indicator variables.
unique(my_data$ormoth)
unique(my_data$orfath)
my_data<-my_data%>% mutate(ormoth = ifelse(ormoth > 1, 1, ormoth),
orfath = ifelse(orfath > 1, 1, orfath))
#Check
unique(my_data$ormoth)
unique(my_data$orfath)
#Drop stresfip, birmon, and weekday
unique(my_data$stresfip) #Could convert this into a regional variable
unique(my_data$birmon) #Could turn this into a quarter?
unique(my_data$weekday) #could treat like a weekday vs weekend binary variable
#Now I drop them.
my_data<-my_data%>% select(-c(stresfip, birmon, weekday))
my_data<-my_data%>%
filter_all(all_vars(!is.na(.)))
View(my_data)
is.na(my_data)
my_data<-drop_na(my_data)
library(dplyr)
library(haven)
library(tidyr)
my_data<-drop_na(my_data)
View(my_data)
#on PC
#my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
#On Mac
my_data<-read_dta("/Users/alexadia/Documents/GitHub/HP-ARE213-Psets/Pset 1/pset1.dta")
library(dplyr)
library(haven)
library(tidyr)
#on PC
#my_data<-read_dta("C:/Users/Ken/Documents/Github/HP-ARE213-Psets/Pset 1/pset1.dta")
#On Mac
my_data<-read_dta("/Users/alexadia/Documents/GitHub/HP-ARE213-Psets/Pset 1/pset1.dta")
#I need to tabulate these all still lol
#For variables that can take on 8 and 9
cleanset1 <- c("cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm")
my_data <- my_data %>%
mutate(across(all_of(cleanset1), ~ifelse(. %in% c(8, 9), NA, .)))
#check cardiac
unique(my_data$cardiac)
#For variables that only take on 9 as missing
cleanset2 <- c("tobacco", "alcohol")
my_data <- my_data %>%
mutate(across(all_of(cleanset2), ~na_if(., 9)))
#check tobacco
unique(my_data$tobacco)
#For drink5
my_data <- my_data %>%
mutate(drink5 = ifelse(drink5 == 5, NA, drink5))
#check drink5
unique(my_data$drink5)
#For cigar6
my_data <- my_data %>%
mutate(cigar6 = ifelse(cigar6 == 6, NA, cigar6))
#check drink5
unique(my_data$cigar6)
#For wgain
my_data <- my_data %>%
mutate(wgain = ifelse(wgain == 99, NA, wgain))
#check wgain
unique(my_data$wgain)
#Check which variables take on the form 1, 2, or missing
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Turn each indicator variable into the form 0 v 1 by mutating such that 2's become 0's.
indicator_set <- c("rectype", "pldel3", "dmar", "csex", "anemia", "cardiac", "lung", "diabetes", "herpes", "chyper", "phyper", "pre4000", "preterm", "tobacco", "alcohol")
for(var in indicator_set){
my_data<-my_data %>%
mutate_at(var, funs(ifelse(.==2, 0, .)))
}
#Check if this works - everything should return false using our original check
sapply(my_data, function(x) all(x %in% c(1, 2, NA)))
#Recode mrace3 as categorical variable (so a factor variable)
class(my_data$mrace3) #starts off as numeric
my_data<-my_data%>%mutate(mrace3 = factor(mrace3))
#Check
class(my_data$mrace3) #confirmed as factor
#Coarsen ormoth and orfath into indicator variables.
unique(my_data$ormoth)
unique(my_data$orfath)
my_data<-my_data%>% mutate(ormoth = ifelse(ormoth > 1, 1, ormoth),
orfath = ifelse(orfath > 1, 1, orfath))
#Check
unique(my_data$ormoth)
unique(my_data$orfath)
#Drop stresfip, birmon, and weekday
unique(my_data$stresfip) #Could convert this into a regional variable
unique(my_data$birmon) #Could turn this into a quarter?
unique(my_data$weekday) #could treat like a weekday vs weekend binary variable
#Now I drop them.
my_data<-my_data%>% select(-c(stresfip, birmon, weekday))
my_data<-drop_na(my_data)
library(naniar)
mcar_test(my_data)
library(stargazer)
stargazer(as.data.frame(my_data), type = "text", summary = TRUE)
#We then split out the data
tobacco_data<-my_data%>%filter(tobacco==1)%>%select(-tobacco)
stargazer(as.data.frame(tobacco_data), type = "text", summary = TRUE)
notobacco_data<-my_data%>%filter(tobacco==0)%>%select(-tobacco)
stargazer(as.data.frame(notobacco_data), type = "text", summary = TRUE)
#One way to do this is via the aggregate() function:
mean_diff<-my_data%>%aggregate(dbrwt~tobacco, FUN = mean)
mean_diff
#If we want to t-test, we can split it out into two different datasets then use the t.test command
nonsmokers<-my_data%>%filter(tobacco==0)%>%select(dbrwt)
smokers<-my_data%>%filter(tobacco==1)%>%select(dbrwt)
dbrwt_test<-t.test(nonsmokers, smokers)
dbrwt_test
#Based on the above, we can generate a new object that has our outcome and all covariates
test_data<-my_data%>%select(dbrwt, tobacco, ormoth, mrace3, dmage, dmeduc, nlbnl, dlivord, totord9, dfage, orfath, dfeduc, pre4000, preterm, nprevist, isllb10)
#re-run the pscore match
pscore_model<-glm(tobacco~ormoth+mrace3+dmage+dmeduc+nlbnl+dlivord+totord9+dfage+orfath+dfeduc+pre4000+preterm+nprevist+isllb10, family = binomial(link = "logit"), test_data)
pscore<-predict(pscore_model, type="response")
#use matchit to get matched
match_data<-matchit(smoking ~ pscores, data=test_data, method="nearest")
library(MatchIt)
#re-run the pscore match
pscore_model<-glm(tobacco~ormoth+mrace3+dmage+dmeduc+nlbnl+dlivord+totord9+dfage+orfath+dfeduc+pre4000+preterm+nprevist+isllb10, family = binomial(link = "logit"), test_data)
pscore<-predict(pscore_model, type="response")
#use matchit to get matched
match_data<-matchit(smoking ~ pscores, data=test_data, method="nearest")
#re-run the pscore match
pscore_model<-glm(tobacco~ormoth+mrace3+dmage+dmeduc+nlbnl+dlivord+totord9+dfage+orfath+dfeduc+pre4000+preterm+nprevist+isllb10, family = binomial(link = "logit"), test_data)
pscore<-predict(pscore_model, type="response")
#use matchit to get matched
match_data<-matchit(tobacco ~ pscores, data=test_data, method="nearest")
#re-run the pscore match
pscore_model<-glm(tobacco~ormoth+mrace3+dmage+dmeduc+nlbnl+dlivord+totord9+dfage+orfath+dfeduc+pre4000+preterm+nprevist+isllb10, family = binomial(link = "logit"), test_data)
pscore<-predict(pscore_model, type="response")
#use matchit to get matched
match_data<-matchit(tobacco ~ pscore, data=test_data, method="nearest")
match_data<-match.data(match_data) #syntax is clumsy here - sorry!
#next rerun regression
doublyrobust_model<-lm(dbrwt~tobacco+ormoth+mrace3+dmage+dmeduc+nlbnl+dlivord+totord9+dfage+orfath+dfeduc+pre4000+preterm+nprevist+isllb10, match_data)
doublyrobust_coefs<-coef(doublyrobust_model)
doublyrobust_ATE <- regression_coefficients["tobacco"]
doublyrobust_coefs<-coef(doublyrobust_model)
#doubly robust ATE
doublyrobust_ATE <- doublyrobust_coefs["tobacco"]
install.packages("cem")
library(cem)
doublyrobust_ATT<- mean(match_data$dbrwt[match_data$tobacco == 1]) - mean(match_data$dbrwt[match_data$tobacco == 0])
#next rerun regression
doublyrobust_model<-lm(dbrwt~tobacco+ormoth+mrace3+dmage+dmeduc+nlbnl+dlivord+totord9+dfage+orfath+dfeduc+pre4000+preterm+nprevist+isllb10, match_data)
doublyrobust_coefs<-coef(doublyrobust_model)
#doubly robust ATE
doublyrobust_ATE <- doublyrobust_coefs["tobacco"]
doublyrobust_ATT<- mean(match_data$dbrwt[match_data$tobacco == 1]) - mean(match_data$dbrwt[match_data$tobacco == 0])
install.packages("hdm")
